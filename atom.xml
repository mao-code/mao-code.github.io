<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Mao 勛哥&#39;s blog</title>
  
  <subtitle>程式技術交流</subtitle>
  <link href="https://mao-code.github.io/atom.xml" rel="self"/>
  
  <link href="https://mao-code.github.io/"/>
  <updated>2023-01-13T16:00:36.025Z</updated>
  <id>https://mao-code.github.io/</id>
  
  <author>
    <name>Mao 勛哥</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>政大Google學生開發者社群-心得（第一學期）</title>
    <link href="https://mao-code.github.io/posts/277323671/"/>
    <id>https://mao-code.github.io/posts/277323671/</id>
    <published>2023-01-11T13:05:29.000Z</published>
    <updated>2023-01-13T16:00:36.025Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在剛上大二時，除了手邊和學長的專案，我也參加了政大的Google學生開發者社群。主要是希望透過提案，<strong>利用科技來解決問題</strong>，在這裡我也深深感受到Google的文化，那就是<strong>不會怕去嘗試、不怕去解決問題</strong>，我也認識在這個社群中的各個人才。在這個社群中，我除了擔任自己<strong>專案領導人</strong>的角色外，我也身兼<strong>後端技術長</strong>的任務，也是想要發揮我目前所學到的、最成熟的後端知識。除了技術面，如何管理一個團隊、一項專案，也是一門很大的課題。希望在未來可以繼續把自己的這項專案做到完善，解決真正的問題！</p><span id="more"></span><h2 id="定位與職位"><a href="#定位與職位" class="headerlink" title="定位與職位"></a>定位與職位</h2><ul><li><h3 id="專案定位"><a href="#專案定位" class="headerlink" title="專案定位"></a>專案定位</h3>我這次的提案叫做「政大通NCCUPass」，以<strong>政大校園生活為出發點</strong>，想要做一款能夠解決政大學生生活上不便的APP，透過專案組的討論與調查，帶來<strong>更便利、聰明與數位化</strong>的校園生活，讓校園內的需求能夠即時被滿足，也讓這款APP融入政大學生的生活中，成為政大校園內不可或缺的一部分，因此，「政大通-NCCUPass」的提案就此誕生</li></ul><hr><p>下面是我們第一次期末發表的海報和照片<br>海報內呈現的是我們規劃、也正在開發的功能<br><img src="/images/posts/GDSC-NCCUPass-experience-1/poster.jpg" style="width: 70%; margin: 15px auto;"></p><hr><p>這個是期末發表當天的攤位介紹照片<br><img src="/images/posts/GDSC-NCCUPass-experience-1/img4.jpg" style="width: 70%; margin: 15px auto;"></p><p><img src="/images/posts/GDSC-NCCUPass-experience-1/img2.JPG" style="width: 70%; margin: 15px auto;"></p><p><img src="/images/posts/GDSC-NCCUPass-experience-1/img1.JPG" style="width: 70%; margin: 15px auto;"></p><hr><ul><li><h3 id="職位"><a href="#職位" class="headerlink" title="職位"></a>職位</h3>在這個專案中，我擔任<strong>Project Leader(專案主持人)<strong>，與</strong>Backend Tech-Lead(後端技術長)<strong>的身份，帶領總共</strong>11人的團隊</strong>，在我們這個團隊中，主要分成四組，前端、後端、UI&#x2F;UX、文書，除了負責主要的後端技術，也要帶領後端的組員們提升實力、協調與規劃。以專案領導人的角度來看，除了需要<strong>規劃整個專案的進度與走向外，也要監督進度、協調各組、人際溝通等等</strong>，除了利用各種專案管理的工具外，也要撰寫各種文件與流程圖，老實說滿累的XD。但也是遇到一群願意跟隨我的隊友們，一起成長，真的非常得感謝他們🙏</li></ul><h2 id="技術"><a href="#技術" class="headerlink" title="技術"></a>技術</h2><ul><li><h3 id="系統架構圖"><a href="#系統架構圖" class="headerlink" title="系統架構圖"></a>系統架構圖</h3><p>下面是我們的系統架構圖，因為我是負責後端的部分，所以會著重畫後端的架構<br><img src="/images/posts/GDSC-NCCUPass-experience-1/NCCUPass-Structure.jpg" style="width: 70%; margin: 15px auto;"></p></li><li><h3 id="後端技術細節"><a href="#後端技術細節" class="headerlink" title="後端技術細節"></a>後端技術細節</h3><p>根據上面的架構圖，我們的專案主要部署在Ubuntu的主機上，所有的服務利用Docker Compose統一建立，另外還有利用GitLab Runner做到自動化整合與自動化部屬的功能。後端程式是由.NET C#撰寫，這邊我使用的是Software Layer Architecture Pattern(軟體分層架構)，結合各種Design Pattern再加上自己的一些變形，資料庫是使用MongoDB的Replica-Set，也有使用Redis做快取，照片和一些公開的檔案主要放在我們的File Server上。其他技術細節我就列在下面，想看的人可以參考一下XD</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">- Software Layer Architecture pattern (多層)</span><br><span class="line">- Repository pattern</span><br><span class="line">- Unit of Work pattern</span><br><span class="line">- Mediator pattern &amp; CQRS</span><br><span class="line">- JWT &amp; RBAC</span><br><span class="line">- Automapper</span><br><span class="line">- Exception handler抽離</span><br><span class="line">- Dapper &amp; EF combination</span><br><span class="line">- Redis (Cache)</span><br><span class="line">- Docker Networking</span><br><span class="line">- Docker Volume</span><br><span class="line">- Docker hub</span><br><span class="line">- appsettings 組態切換</span><br><span class="line">- MongoDB replica-set</span><br><span class="line">- Git 多人協作</span><br><span class="line">- Swagger / OpenAPI</span><br><span class="line">- Docker File Server</span><br><span class="line">- Docker mongoDB backup daily</span><br><span class="line">- Docker Compose</span><br></pre></td></tr></table></figure><p>之後也會一直新增，因為現在處於專案開發的初期。</p></li></ul><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>最後，這個專案雖然只是在發展初期，但我希望未來可以發展到我預想的樣子，也非常感謝一路願意跟隨我、幫助我的隊友們，單打獨鬥真的比不上團隊合作👍，也希望各位未來也可以繼續幫助我啦，現在打分享文可能還太早，但我就是想要趁學期末趕快記錄一下哈哈</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;在剛上大二時，除了手邊和學長的專案，我也參加了政大的Google學生開發者社群。主要是希望透過提案，&lt;strong&gt;利用科技來解決問題&lt;/strong&gt;，在這裡我也深深感受到Google的文化，那就是&lt;strong&gt;不會怕去嘗試、不怕去解決問題&lt;/strong&gt;，我也認識在這個社群中的各個人才。在這個社群中，我除了擔任自己&lt;strong&gt;專案領導人&lt;/strong&gt;的角色外，我也身兼&lt;strong&gt;後端技術長&lt;/strong&gt;的任務，也是想要發揮我目前所學到的、最成熟的後端知識。除了技術面，如何管理一個團隊、一項專案，也是一門很大的課題。希望在未來可以繼續把自己的這項專案做到完善，解決真正的問題！&lt;/p&gt;</summary>
    
    
    
    <category term="專案" scheme="https://mao-code.github.io/categories/%E5%B0%88%E6%A1%88/"/>
    
    <category term="GDSC" scheme="https://mao-code.github.io/categories/GDSC/"/>
    
    <category term="side project" scheme="https://mao-code.github.io/categories/%E5%B0%88%E6%A1%88/side-project/"/>
    
    <category term="NCCUPass" scheme="https://mao-code.github.io/categories/GDSC/NCCUPass/"/>
    
    
    <category term="專案" scheme="https://mao-code.github.io/tags/%E5%B0%88%E6%A1%88/"/>
    
    <category term="GDSC" scheme="https://mao-code.github.io/tags/GDSC/"/>
    
    <category term="NCCUPass" scheme="https://mao-code.github.io/tags/NCCUPass/"/>
    
  </entry>
  
  <entry>
    <title>CC-沈浸式線上逛街APP-系統與技術介紹</title>
    <link href="https://mao-code.github.io/posts/2012237495/"/>
    <id>https://mao-code.github.io/posts/2012237495/</id>
    <published>2023-01-11T12:58:33.000Z</published>
    <updated>2023-01-24T14:04:20.573Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>接續上一篇的文章，這篇文章會著重介紹這個系統<br>以下是我在YouTube上對這個專案的介紹與Demo：</p><iframe    src="https://www.youtube.com/embed/aMGnyI2Xe04"></iframe><p>這篇文章的內容會與影片很像，主要分為<strong>動機與介紹、重點功能簡介、系統架構與技術</strong>的順序介紹<br>系統功能Demo, 還請觀看影片介紹</p><span id="more"></span><p><img src="/images/posts/CC-project-demo/1.png" style="width: 90%; margin: 15px auto;"></p><h2 id="動機與介紹"><a href="#動機與介紹" class="headerlink" title="動機與介紹"></a>動機與介紹</h2><p><img src="/images/posts/CC-project-demo/2.png" style="width: 70%; margin: 15px auto;"><br>首先我們主要的TA之一是線上逛街族, 針對這個族群我們統整出簡單的兩點：第一, 他們在線上瀏覽或滑商品時, 通常沒有特定的消費目的, 只是想要滑滑看看, 無目的的瀏覽行為, 第二, 這種行為主要是以消遣、獲得樂趣為目的, 而不一定是真的想要買商品</p><hr><p><img src="/images/posts/CC-project-demo/3.png" style="width: 70%; margin: 15px auto;"><br>根據上面的族群設定, 我們的專案主要會focus在解決或滿足下面的問題, 第一, 我們是針對無目的性的消費情境底下的需求, 第二, 我們希望帶給使用者沈浸式的體驗, 所謂的沈浸式體驗, 就是在舒服且不受干擾的狀態下, 接收自己有興趣的資訊, 以此讓使用者能在我們這個APP上做消遣、殺時間的動作, 這麼做的目的很大一部分是為了捕捉使用者的微時刻, 這些微時刻的數據可以代表使用者不同時刻的喜好或者決策, 第四，我們這個APP也會瞄準直播的市場與直播平台合作，而這些直播主的煩惱，便是下播後無法持續創造收入，因此我們除了希望能延長商品的生命週期外，也可以透過捕捉使用者行為來提供直播主缺乏的Consumer Insight</p><hr><p><img src="/images/posts/CC-project-demo/4.png" style="width: 70%; margin: 15px auto;"><br>為了達成以上的目的，我們主要有這幾項手段，第一, 研究推薦演算法與捕捉使用者行為，透過使用者不同時刻的行為數據來作為推薦的依據，而非傳統的電商使用歷史紀錄來做推薦，以次讓使用者能夠在每時每刻接收有興趣的資訊，達到沈浸式的體驗。第二，透過簡潔的介面，降低使用者瀏覽時的壓力，讓使用者更願意停留在APP上，第三，透過分享貼文、追蹤、評論等等的社群機制，讓使用者能夠了解親朋好友們有興趣或者好評的商品，也能夠享受社群的樂趣，增加APP的黏著度，最後，透過APP上種種捕捉使用者行為數據的機制，可以將這些數據提供給與我們合作的第三方廠商，讓廠商更了解使用者的喜好</p><h2 id="重點功能簡介"><a href="#重點功能簡介" class="headerlink" title="重點功能簡介"></a>重點功能簡介</h2><p><img src="/images/posts/CC-project-demo/5.png" style="width: 70%; margin: 15px auto;"><br>再來介紹一些重點功能的簡短敘述，首先第一個是我們的商品貼文，也是商品的主體，貼文特色主要以滿板設計與資訊收合來達到雜訊最小化的目的，另外後面Demo也會呈現推薦商品的形式，與現在短影音的方式很像，透過推薦與給人耳目一新的商品，帶給使用者殺時間的樂趣，另外，透過商品貼文，也可以成為直播主下播後銷售的利器，與一般電商不同的是，我們主動推薦商家商品，而且是透過使用者當前的行為喜好，而不是被動等待使用者搜尋或是透過購買紀錄來做推薦</p><hr><p><img src="/images/posts/CC-project-demo/6.png" style="width: 70%; margin: 15px auto;"><br>再來是我們的主頁面，透過滑卡的機制增加互動感，也可以同時捕捉使用者行為，以做到即時推薦，這麼做除了可以增加沈浸體驗，也可以更廣泛的推薦商品，提高曝光程度</p><hr><p><img src="/images/posts/CC-project-demo/7.png" style="width: 70%; margin: 15px auto;"><br>主頁面與探索頁面都可以透過使用者的滑卡行為、停留時間與點擊率，來彼此優化推薦內容，做到雙向推薦的功能</p><hr><p><img src="/images/posts/CC-project-demo/8.png" style="width: 70%; margin: 15px auto;"><br>探索頁面除了會推薦使用者感興趣的商品，也會隨機推薦相關商品，增加新奇度，其中最大塊的貼文則為推薦分數最高的商品，透過矩陣式樹狀結構，帶給使用者簡潔與大量瀏覽的感受</p><hr><p><img src="/images/posts/CC-project-demo/9.png" style="width: 70%; margin: 15px auto;"><br>CC提供商城、買家、直播主追蹤的機制，加上個人化自己的動態牆與留言區，增加社群互動性，以社群的力量增加APP的黏著度</p><hr><p><img src="/images/posts/CC-project-demo/10.png" style="width: 70%; margin: 15px auto;"><br>分享貼文除了可以增加互動的樂趣，也是提供消費者洞見的大平台<br>最重要的是，可以藉由社群的力量，一傳十十傳百，來行銷商品</p><h2 id="系統架構與技術"><a href="#系統架構與技術" class="headerlink" title="系統架構與技術"></a>系統架構與技術</h2><p>先附上系統架構圖：<br><img src="/images/posts/CC-project-demo/CC_structure.jpeg" style="width: 70%; margin: 15px auto;"></p><p>首先前端主要由Angular寫成，搭配<strong>模組化與物件導向設計，增加程式的可維護性</strong>，最後透過PWA包裝成跨平台的APP<br>藉由Angular能夠模組化與元件化的特性，我們將各個功能切分成不同模組，提升程式低耦合高內聚的特性，另外，Token驗證、路由保護、API攔截器、資料格式化Pipeline等等，也都抽離出來實作，其中，核心的商業邏輯切分在我們的Service模組，與畫面邏輯分離，再藉由依賴注入讓各模組使用，這樣的設計，讓我們的專案在未來更改與維護擴充時非常省時與省力。</p><p>這裡也是我第一次使用前端框架，來寫一個比較完整的專案，由於我是後端出身，所以選擇一個自己寫起來最舒服的Angular框架，有種在寫後端的親切感XD。</p><p>後端主要由NodeJS寫成，資料庫則為MongoDB，一樣是將各個功能進行模組化的拆分，與資料庫索引的優化。</p><p>另外WebServer的部分則是由IIS代理，加上GitLab CI&#x2F;CD &amp; GitLab Runner做到自動化整合與部屬的功能</p><style>.video-container{    padding-top: 60% !important;}</style>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;接續上一篇的文章，這篇文章會著重介紹這個系統&lt;br&gt;以下是我在YouTube上對這個專案的介紹與Demo：&lt;/p&gt;
&lt;iframe
    src=&quot;https://www.youtube.com/embed/aMGnyI2Xe04&quot;&gt;
&lt;/iframe&gt;

&lt;p&gt;這篇文章的內容會與影片很像，主要分為&lt;strong&gt;動機與介紹、重點功能簡介、系統架構與技術&lt;/strong&gt;的順序介紹&lt;br&gt;系統功能Demo, 還請觀看影片介紹&lt;/p&gt;</summary>
    
    
    
    <category term="專案" scheme="https://mao-code.github.io/categories/%E5%B0%88%E6%A1%88/"/>
    
    <category term="side project" scheme="https://mao-code.github.io/categories/%E5%B0%88%E6%A1%88/side-project/"/>
    
    <category term="作品" scheme="https://mao-code.github.io/categories/%E5%B0%88%E6%A1%88/%E4%BD%9C%E5%93%81/"/>
    
    
    <category term="專案" scheme="https://mao-code.github.io/tags/%E5%B0%88%E6%A1%88/"/>
    
    <category term="作品" scheme="https://mao-code.github.io/tags/%E4%BD%9C%E5%93%81/"/>
    
    <category term="side project" scheme="https://mao-code.github.io/tags/side-project/"/>
    
  </entry>
  
  <entry>
    <title>大一大二參加畢業專案與程式比賽心得分享</title>
    <link href="https://mao-code.github.io/posts/534426495/"/>
    <id>https://mao-code.github.io/posts/534426495/</id>
    <published>2023-01-11T12:39:50.000Z</published>
    <updated>2023-01-12T18:08:01.403Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>小弟我在剛上大一沒多久，就私mail系上的程式老師，詢問是否可以參與更多的專案或研究，也一併把我的履歷給教授看。<br>沒想到教授大方地給我幾條路選，可以跟教授做研究，出去實習，或是和學長們做專案。<br>大一的我想要慢慢累積實力，於是決定先<strong>和學長們做專案</strong>，去比賽，累積經驗。<br>在歷經<strong>國科會專案、資訊競賽、畢業專案競賽等等</strong>後，我非常感謝教授和學長們給我這個機會，讓我可以擁有這些寶貴的經驗！<br>這篇文章主要著重在心得與分享，比較技術面的內容會在下篇文章詳細介紹。</p><span id="more"></span><h2 id="比賽心得與定位"><a href="#比賽心得與定位" class="headerlink" title="比賽心得與定位"></a>比賽心得與定位</h2><p>在這個Team內，我主要負責程式開發，包括<strong>前端、伺服器架設與管理和一部分的後端</strong>。<br>前前後後比了<strong>國科會大專生計畫、智慧創新、資訊服務和系上的畢業專案競賽</strong>，大約歷時1年多的時間，在這段時間裡，我們歷經<strong>發想、開發、維護、寫技術文件、UI&#x2F;UX設計到演算法研究等等</strong>，這也是我大一結束為止做過相對完整的專案。</p><hr><p>這是我們智慧創新和資訊服務競賽時的照片，我們直接把成品給評審滑XD，因為以我們的系統來說相對完整，也不怕噴Bug，雖然都只進到決賽，但我也更加知道這類型比賽的準備方向（基本上就是要對到當前流行的主題），<del>所以明年就準備AI吧</del><br><img src="/images/posts/CC-experience/智慧創新.JPG" style="width: 70%; margin: 15px auto;"><br><img src="/images/posts/CC-experience/資服.jpg" style="width: 70%; margin: 15px auto;"></p><hr><p>這是系上畢業專案的比賽，非常榮幸拿到第二名！當天還直接被其他資訊公司的主管遞名片，受寵若驚。<br><img src="/images/posts/CC-experience/畢業專案.JPG" style="width: 70%; margin: 15px auto;"><br><img src="/images/posts/CC-experience/畢業專案得獎.JPG" style="width: 70%; margin: 15px auto;"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>總的來說，這是我<strong>參與多人協作、實作一個完整專案的寶貴經驗</strong>，這也成為我日後開發其他專案的養分(Google學生開發者社群, 資訊競賽, etc.)，除了<strong>技術面的大幅成長，專案管理、人際互動、時間管理</strong>也都是成長的一部分，主動去尋找機會，得到的會比你想像的多，雖然有點辛苦就是了，但我覺得很值得！所以時間管理真的超重要，這也讓我在工程師這條路上變得更主動，相信只要努力，自己絕對值得更好的！</p><p>比較技術面的內容會在之後的文章提及</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;小弟我在剛上大一沒多久，就私mail系上的程式老師，詢問是否可以參與更多的專案或研究，也一併把我的履歷給教授看。&lt;br&gt;沒想到教授大方地給我幾條路選，可以跟教授做研究，出去實習，或是和學長們做專案。&lt;br&gt;大一的我想要慢慢累積實力，於是決定先&lt;strong&gt;和學長們做專案&lt;/strong&gt;，去比賽，累積經驗。&lt;br&gt;在歷經&lt;strong&gt;國科會專案、資訊競賽、畢業專案競賽等等&lt;/strong&gt;後，我非常感謝教授和學長們給我這個機會，讓我可以擁有這些寶貴的經驗！&lt;br&gt;這篇文章主要著重在心得與分享，比較技術面的內容會在下篇文章詳細介紹。&lt;/p&gt;</summary>
    
    
    
    <category term="心得" scheme="https://mao-code.github.io/categories/%E5%BF%83%E5%BE%97/"/>
    
    <category term="比賽" scheme="https://mao-code.github.io/categories/%E6%AF%94%E8%B3%BD/"/>
    
    
    <category term="心得" scheme="https://mao-code.github.io/tags/%E5%BF%83%E5%BE%97/"/>
    
    <category term="比賽" scheme="https://mao-code.github.io/tags/%E6%AF%94%E8%B3%BD/"/>
    
  </entry>
  
  <entry>
    <title>[.NET][Design Pattern] Mediator Pattern (中介者模式)</title>
    <link href="https://mao-code.github.io/posts/4072203086/"/>
    <id>https://mao-code.github.io/posts/4072203086/</id>
    <published>2022-09-06T16:00:00.000Z</published>
    <updated>2023-01-11T12:41:42.952Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這篇文章主要介紹Mediator Pattern的定義以及簡單實作<br>介紹使用Mediator Pattern的好處, 並提供範例<br>在軟體架構中Mediator Patternc和Repository Pattern都是常用的pattern<br>通常.NET專案中會結合MediatR套件使用</p><span id="more"></span><h2 id="定義-Mediator-Pattern"><a href="#定義-Mediator-Pattern" class="headerlink" title="定義 Mediator Pattern"></a>定義 Mediator Pattern</h2><p>IG貼文：<br><span class="exturl" data-url="aHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9wL0NpTTBlenBMTzR6Lz9obD16aC10dw==">https://www.instagram.com/p/CiM0ezpLO4z/?hl=zh-tw<i class="fa fa-external-link-alt"></i></span><br>GitHub連結：<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hby1jb2RlL01lZGlhdG9yUGF0dGVybg==">https://github.com/mao-code/MediatorPattern<i class="fa fa-external-link-alt"></i></span></p><p>定義一個 Mediator 物件用來<strong>封裝一組物件的互動方式</strong>。<br>Mediator 藉由<strong>避免物件間相互直接的引用</strong>，從而降低它們之間的耦合程度，並且可以讓我們獨立地改變這些物件間的互動方式。</p><p>下面這兩張圖片可以簡單體現出Mediator Pattern在做的事</p><p><strong>沒有使用中介者, 物件彼此之間直接調用</strong><br><img src="/images/posts/mediator-pattern/origin-graph.png" style="width: 70%; margin: 15px auto;"></p><p><strong>使用中介者, 物件只依賴mediator來與其他物件溝通</strong><br><img src="/images/posts/mediator-pattern/star.png" style="width: 70%; margin: 15px auto;"></p><p>可以發現使用中介者模式之後, 物件都只依賴中介者來傳遞訊息, 而不是直接調用彼此, 以此達到解耦。<br>在現實生活中, 也有類似的例子, 例如開發團隊, 客服團隊, 產銷團隊, 設計團隊, 若彼此之間沒有一個統一的溝通,<br>那麼各個團隊耦合度很高, 開發跟設計要協調介面, 又要和產銷和客服討論如何贏得如何符合市場, 這樣一來分工太複雜。<br>所以需要一個<strong>產品經理來當中介者</strong>, 協助溝通各個團隊。</p><h2 id="優缺點"><a href="#優缺點" class="headerlink" title="優缺點"></a>優缺點</h2><ul><li>優點 <ol><li>降低物件之間的耦合性，讓物件容易重複使用。</li><li>物件之間一對多的關聯性變成一對一，提高系統靈活性，也讓整體容易維護及擴充。</li></ol></li><li>缺點 (Trade-off)<ol><li>同事類別過多時，中介者責任很大，會使系統提升一定程度的複雜性。</li></ol></li></ul><h2 id="UML與成員"><a href="#UML與成員" class="headerlink" title="UML與成員"></a>UML與成員</h2><p><img src="/images/posts/mediator-pattern/uml.png" style="width: 70%; margin: 15px auto;"></p><table>    <thead>        <th>成員</th>        <th>定義</th>    </thead>    <tbody>        <tr>            <td>Mdiator</td>            <td>抽象中介者, 定義註冊進入mediator以及轉發的方法</td>        </tr>        <tr>            <td>ConcreteMediator</td>            <td>具體中介者, 定義一個集合來管理同事, 所以聚合Colleague</td>        </tr>        <tr>            <td>Colleague</td>            <td>抽象同事, 可以保存中介者, 調用內部方法, 所以聚合Mediator</td>        </tr>        <tr>            <td>ConcreteColleague</td>            <td>具體同事, 當要跟其他物件溝通時, 利用內部的中介者進行轉發</td>        </tr>    </tbody></table><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p><strong>專案結構</strong><br><img src="/images/posts/mediator-pattern/structure.png" style="width: 70%; margin: 15px auto;"></p><p><strong>抽象Mediator</strong></p><figure class="highlight c#"><figcaption><span>Mediator(抽象)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> MediatorPattern.colleagues;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MediatorPattern.mediator</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// 團隊列舉</span></span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">enum</span> teamType</span><br><span class="line">    &#123;</span><br><span class="line">        ENGINEERING, DESIGN, SERVICE, MARKETING</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 抽象mediator</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Mediator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Register</span>(<span class="params">teamType type, Colleague colleague</span>)</span>; <span class="comment">//註冊進入mediator</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">Relay</span>(<span class="params">teamType type, <span class="built_in">string</span> msg</span>)</span>; <span class="comment">//轉發;傳遞</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>PackageManager(具體Mediator)</strong></p><figure class="highlight c#"><figcaption><span>PackageManager(具體Mediator)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> MediatorPattern.colleagues;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MediatorPattern.mediator</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 具體mediator</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ProductManager</span> : <span class="title">Mediator</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">// 聚合Colleague, 一個儲存colleague物件的dictionary</span></span><br><span class="line">        <span class="keyword">private</span> Dictionary&lt;teamType, Colleague&gt; colleagues = <span class="keyword">new</span> Dictionary&lt;teamType, Colleague&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Register</span>(<span class="params">teamType type, Colleague colleague</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            colleague.setMediator(<span class="keyword">this</span>);</span><br><span class="line">            <span class="keyword">this</span>.colleagues.Add(type, colleague);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">Relay</span>(<span class="params">teamType type, <span class="built_in">string</span> msg</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Colleague toColleague = <span class="keyword">this</span>.colleagues[type];</span><br><span class="line">            toColleague.receive(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>抽象Colleague</strong></p><figure class="highlight c#"><figcaption><span>Colleague(抽象)</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> MediatorPattern.mediator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">MediatorPattern.colleagues</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title">Colleague</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">protected</span> Mediator? Mediator &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMediator</span>(<span class="params">Mediator mediator</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">            <span class="keyword">this</span>.Mediator = mediator;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 接收訊息後如何反應</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">receive</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 傳送訊息給特定物件</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">send</span>(<span class="params">teamType type, <span class="built_in">string</span> msg</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>具體Colleague</strong></p><figure class="highlight c#"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//具體colleague</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">DesignTeam</span> : <span class="title">Colleague</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">receive</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;設計團隊收到訊息: &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">send</span>(<span class="params">teamType type, <span class="built_in">string</span> msg</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;設計團隊發送訊息: &quot;</span>+msg);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.Mediator != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Mediator.Relay(type, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">EngineeringTeam</span> : <span class="title">Colleague</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">receive</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;工程師團隊收到訊息: &quot;</span>+msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">send</span>(<span class="params">teamType type, <span class="built_in">string</span> msg</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;工程師團隊發送訊息: &quot;</span>+msg);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.Mediator != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Mediator.Relay(type, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">MarketingTeam</span> : <span class="title">Colleague</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">receive</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;產銷團隊收到訊息: &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">send</span>(<span class="params">teamType type, <span class="built_in">string</span> msg</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;產銷團隊發送訊息: &quot;</span>+msg);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.Mediator != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Mediator.Relay(type, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">ServiceTeam</span> : <span class="title">Colleague</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">receive</span>(<span class="params"><span class="built_in">string</span> msg</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;客服團隊收到訊息: &quot;</span> + msg);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">override</span> <span class="keyword">void</span> <span class="title">send</span>(<span class="params">teamType type, <span class="built_in">string</span> msg</span>)</span></span><br><span class="line">    &#123;</span><br><span class="line">        Console.WriteLine(<span class="string">&quot;客服團隊發送訊息: &quot;</span>+msg);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.Mediator != <span class="literal">null</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">this</span>.Mediator.Relay(type, msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Client端使用</strong></p><figure class="highlight c#"><figcaption><span>Program.cs</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> MediatorPattern.colleagues;</span><br><span class="line"><span class="keyword">using</span> MediatorPattern.mediator;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 具體mediator</span></span><br><span class="line">ProductManager pm = <span class="keyword">new</span> ProductManager();</span><br><span class="line"></span><br><span class="line"><span class="comment">//具體colleague</span></span><br><span class="line">Colleague ds = <span class="keyword">new</span> DesignTeam();</span><br><span class="line">Colleague eg = <span class="keyword">new</span> EngineeringTeam();</span><br><span class="line">Colleague mk = <span class="keyword">new</span> MarketingTeam();</span><br><span class="line">Colleague sv = <span class="keyword">new</span> ServiceTeam();</span><br><span class="line"></span><br><span class="line"><span class="comment">//註冊進入mediator</span></span><br><span class="line">pm.Register(teamType.DESIGN, ds);</span><br><span class="line">pm.Register(teamType.ENGINEERING, eg);</span><br><span class="line">pm.Register(teamType.MARKETING, mk);</span><br><span class="line">pm.Register(teamType.SERVICE, sv);</span><br><span class="line"></span><br><span class="line"><span class="comment">//執行</span></span><br><span class="line">ds.send(teamType.ENGINEERING, <span class="string">&quot;UI設計稿完成&quot;</span>);</span><br><span class="line">Console.WriteLine(String.Concat(Enumerable.Repeat(<span class="string">&quot;-&quot;</span>, <span class="number">10</span>)));</span><br><span class="line"></span><br><span class="line">eg.send(teamType.MARKETING, <span class="string">&quot;軟體開發完成&quot;</span>);</span><br><span class="line">Console.WriteLine(String.Concat(Enumerable.Repeat(<span class="string">&quot;-&quot;</span>, <span class="number">10</span>)));</span><br><span class="line"></span><br><span class="line">Console.ReadKey();</span><br></pre></td></tr></table></figure><p><strong>結果</strong><br><img src="/images/posts/mediator-pattern/result.png" style="width: 70%; margin: 15px auto;"></p><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><ul><li>定義:<br>  定義一個 Mediator 物件用來封裝一組物件的互動方式。Mediator 藉由避免物件間相互直接的引用，從而降低它們之間的耦合程度，並且可以讓我們獨立地改變這些物件間的互動方式。</li><li>成員<ul><li>抽象Mediator: 定義方法, 轉接訊息</li><li>具體Mediator: 實作抽象Mediator, Colleague (擁有0~多個Colleague)</li><li>抽象Colleague: 定義方法, 聚合抽象Mediator (Colleague擁有Mediator)</li><li>具體Colleague: 實作抽象Mediator</li></ul></li><li>優點 <ol><li>降低物件之間的耦合性，讓物件容易重複使用。</li><li>物件之間一對多的關聯性變成一對一，提高系統靈活性，也讓整體容易維護及擴充。</li></ol></li><li>缺點 (Trade-off)<ol><li>同事類別過多時，中介者責任很大，會使系統提升一定程度的複雜性。</li></ol></li></ul>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這篇文章主要介紹Mediator Pattern的定義以及簡單實作&lt;br&gt;介紹使用Mediator Pattern的好處, 並提供範例&lt;br&gt;在軟體架構中Mediator Patternc和Repository Pattern都是常用的pattern&lt;br&gt;通常.NET專案中會結合MediatR套件使用&lt;/p&gt;</summary>
    
    
    
    <category term="Design Pattern" scheme="https://mao-code.github.io/categories/Design-Pattern/"/>
    
    
    <category term="design-pattern" scheme="https://mao-code.github.io/tags/design-pattern/"/>
    
  </entry>
  
  <entry>
    <title>[.NET][Design Pattern] Repository Pattern</title>
    <link href="https://mao-code.github.io/posts/1822258245/"/>
    <id>https://mao-code.github.io/posts/1822258245/</id>
    <published>2022-09-04T16:00:00.000Z</published>
    <updated>2023-01-11T12:41:42.953Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>這篇文章主要介紹何為Repository Pattern, 並如何在.NET C#中實作<br>並結合Unit Of Work Pattern, 讓程式對Repository解耦<br>這個design pattern可以說是踏入軟體架構的敲門磚<br>也算是非常常用的pattern, 實用性非常高</p><span id="more"></span><h2 id="定義：Repository-Pattern-Unit-Of-Work-Pattern"><a href="#定義：Repository-Pattern-Unit-Of-Work-Pattern" class="headerlink" title="定義：Repository Pattern, Unit Of Work Pattern"></a>定義：Repository Pattern, Unit Of Work Pattern</h2><p>在我的IG上, 有對Repository Pattern做一篇貼文<br><span class="exturl" data-url="aHR0cHM6Ly93d3cuaW5zdGFncmFtLmNvbS9wL0NnWm5TNjRoMjVtLz91dG1fc291cmNlPWlnX3dlYl9jb3B5X2xpbms=">https://www.instagram.com/p/CgZnS64h25m/?utm_source=ig_web_copy_link<i class="fa fa-external-link-alt"></i></span><br>GitHub連結：<br><span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL21hby1jb2RlL1JlcG9zaXRvcnlQYXR0ZXJu">https://github.com/mao-code/RepositoryPattern<i class="fa fa-external-link-alt"></i></span></p><p>Repository Pattern主要就是由Repository這個元素所組成<br>我個人都會結合Unit Of Work Pattern一起使用</p><ul><li>Repository:<ul><li><strong>Act like a collection of object in memory.</strong></li></ul></li><li>Unit of work:<ul><li>Maintain a list of objects affected by a business transaction and <strong>coordinate th writting out of changes.</strong></li></ul></li></ul><p>以上是對兩個主要元素的定義<br>簡單來說 <ins>Repository就像是一群存在記憶體中的Objects</ins><br>而 <ins>Unit of work則是針對這些<strong>被改變</strong>的Objects, 統一在這裡做處理<ins></p><h2 id="更簡單的解釋"><a href="#更簡單的解釋" class="headerlink" title="更簡單的解釋"></a>更簡單的解釋</h2><p><strong>UnitOfWork在這裡就像是DB, Repository就像是Table.</strong><br><strong>入果以EntityFramework來看, 就是Context和Entity的關係.</strong><br>EF本身也有做Repository和UnitOfWork.</p><p><strong>把每一次的operation看作一個unit of work, 等到operation結束才Complete.</strong><br>這樣一來, <strong>當我們的Controller或Service需要很多Repository來操作時, 就只需要依賴UnitOfWork, 簡化程式碼與依賴.</strong><br><strong>另一個好處是可以管理Repository之間之間的情況, 做到DB的Atomic operation.</strong><br>舉例來說, 當Repository1儲存成功, 而Repository2儲存失敗, 以一個完整的Atomic operation來說, 一個失敗, operation就算是失敗.<br>但在這裡, Repository之間是沒有聯繫的, 因此資料會處於一種dirty state, 就是一個進去, 但一個失敗了.<br>沒辦法回到最初的狀況再debug, UnitOfWork就是來處理這種問題, 當Complete時失敗, 並不會真的動到DB, 而是只動到Repository. 可以整個roll back處理</p><h2 id="好處"><a href="#好處" class="headerlink" title="好處"></a>好處</h2><p>使用Repository主要是可以<strong>對ORM的框架解耦</strong>, 對Context和Entities的依賴度不會太高.<br>舉例來說我今天使用Entity Framework, 開發了幾個月, 老闆突然要使用ADO.NET<br>這時如果沒有使用Repository, 而是在程式碼裡面大量使用Context與Entity<br>那麼要修改程式碼就是一件大工程了….<br>下面引用我在IG上的照片, 裡面還有提到一個好處是更好做單元測試.</p><p><img src="/images/posts/repository-pattern/benifits.jpg" style="width: 70%; margin: 15px auto;"><br>可以看到, repository是存放在unit of work內, 我們的程式是去依賴unit of work,<br>unit of work再透過repository去操作ORM, ORM再去操作我們的資料庫.</p><h2 id="實作"><a href="#實作" class="headerlink" title="實作"></a>實作</h2><p>先附上UML<br><img src="/images/posts/repository-pattern/uml.jpg" style="width: 70%; margin: 15px auto;"><br>稍微解釋一下, 這裡會有一個generic的repository, 負責處理基本的Get, Find, Romove等.<br>而其他concrete的repository再去繼承和實作, 內部就針對自己的repository做特殊的query.</p><p>接下來會使用.NET去實作裡面的各個細節<br>先附上專案結構和ERD<br><img src="/images/posts/repository-pattern/structure.jpg" style="width: 70%; margin: 15px auto;"><br>這裡主要是以書本和作者為範例</p><p>Models裡面是用EntityFramework migration過來的Context和Entities model<br>我們主要實作Repository和UnitOfWork的部分</p><h3 id="IRepository-Repository"><a href="#IRepository-Repository" class="headerlink" title="IRepository, Repository"></a>IRepository, Repository</h3><p><strong>這裡是generic的repository</strong></p><figure class="highlight c#"><figcaption><span>IRepository</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq.Expressions;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RepositoryPatternPractice.Repositories</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//Interface here act like a protocol or a license</span></span><br><span class="line"><span class="comment">//Generic Interface -&gt; Interface&lt;T&gt;</span></span><br><span class="line"><span class="comment">//where keyword can set some restriction on the generic</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IRepository</span>&lt;<span class="title">TEntity</span>&gt; <span class="keyword">where</span> <span class="title">TEntity</span>: <span class="keyword">class</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//Three main group of functions</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Finding objects</span></span><br><span class="line"><span class="function">TEntity <span class="title">Get</span>(<span class="params"><span class="built_in">int</span> id</span>)</span>;</span><br><span class="line"><span class="function">IEnumerable&lt;TEntity&gt; <span class="title">GetAll</span>()</span>;</span><br><span class="line"><span class="function">IEnumerable&lt;TEntity&gt; <span class="title">Find</span>(<span class="params">Expression&lt;Func&lt;TEntity, <span class="built_in">bool</span>&gt;&gt; predicate</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Func&lt;input, output&gt; -&gt; 委派物件(將函數當作物件的容器)</span></span><br><span class="line"><span class="comment">eg. Func&lt;int, int&gt; fn = n=&gt;n*n;</span></span><br><span class="line"><span class="comment">Expression (eg. LINQ)</span></span><br><span class="line"><span class="comment">turn an lambda to an expression tree</span></span><br><span class="line"><span class="comment">and the LINQ can input a lambda expression (put in a generic delegate)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Adding object</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Add</span>(<span class="params">TEntity entity</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">AddRange</span>(<span class="params">IEnumerable&lt;TEntity&gt; entities</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Removing object</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">TEntity entity</span>)</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RemoveRange</span>(<span class="params">IEnumerable&lt;TEntity&gt; entities</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>!! 要注意的是, <strong>Repository不應該有Update方法</strong>, 主要是語義問題. !!<br>Repository act like a collection of objects in memory.<br>這些操作到Database的動作, 應該交由UnitOfWork, 把這些objects save到database.<br>所以應該是UnitOfWork透過Repository撈出來, 然後修改, 再透過UnitOfWork Save.<br>詳細好處可以看<strong>更簡單的解釋</strong>那裡</p><figure class="highlight c#"><figcaption><span>Repository</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> System.Linq.Expressions;</span><br><span class="line"><span class="keyword">using</span> Microsoft.EntityFrameworkCore;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RepositoryPatternPractice.Repositories</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">Repository</span>&lt;<span class="title">TEntity</span>&gt; : <span class="title">IRepository</span>&lt;<span class="title">TEntity</span>&gt; <span class="keyword">where</span> <span class="title">TEntity</span>: <span class="keyword">class</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//the context here is generic, so it has nothing to do with my application</span></span><br><span class="line">        <span class="comment">//so you can DI some specific contexts</span></span><br><span class="line">        <span class="comment">//protected because the specific repository can use it</span></span><br><span class="line">        <span class="keyword">protected</span> <span class="keyword">readonly</span> DbContext Context;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">Repository</span>(<span class="params">DbContext context</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">            Context = context;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> TEntity <span class="title">Get</span>(<span class="params"><span class="built_in">int</span> id</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Context.Set&lt;TEntity&gt;().Find(id);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//don&#x27;t return IQueryable!!</span></span><br><span class="line">        <span class="comment">//Repository should encapsulate the query</span></span><br><span class="line">        <span class="comment">//so on the Service or Controller won&#x27;t get too much pressure</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IEnumerable</span>&lt;<span class="title">TEntity</span>&gt; <span class="title">GetAll</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Context.Set&lt;TEntity&gt;().ToList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">IEnumerable</span>&lt;<span class="title">TEntity</span>&gt; <span class="title">Find</span>(<span class="params">Expression&lt;Func&lt;TEntity, <span class="built_in">bool</span>&gt;&gt; predicate</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> Context.Set&lt;TEntity&gt;().Where(predicate);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Add</span>(<span class="params">TEntity entity</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Context.Set&lt;TEntity&gt;().Add(entity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">AddRange</span>(<span class="params">IEnumerable&lt;TEntity&gt; entities</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Context.Set&lt;TEntity&gt;().AddRange(entities);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Remove</span>(<span class="params">TEntity entity</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Context.Set&lt;TEntity&gt;().Remove(entity);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">RemoveRange</span>(<span class="params">IEnumerable&lt;TEntity&gt; entities</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            Context.Set&lt;TEntity&gt;().RemoveRange(entities);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IBookRepository-BookRepository"><a href="#IBookRepository-BookRepository" class="headerlink" title="IBookRepository, BookRepository"></a>IBookRepository, BookRepository</h3><p><strong>這裡開始是concrete的repository</strong></p><figure class="highlight c#"><figcaption><span>IBookRepository</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> RepositoryPatternPractice.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RepositoryPatternPractice.Repositories</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//derive from my generic Repository interface</span></span><br><span class="line"><span class="comment">//C# allow this interface chain</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IBookRepository</span> : <span class="title">IRepository</span>&lt;<span class="title">Book</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">IEnumerable&lt;Book&gt; <span class="title">GetTopSellingBooks</span>(<span class="params"><span class="built_in">int</span> count</span>)</span>;</span><br><span class="line"><span class="function">IEnumerable&lt;Book&gt; <span class="title">GetBooksByAuthor</span>(<span class="params">Author author</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><figcaption><span>BookRepository</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> RepositoryPatternPractice.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RepositoryPatternPractice.Repositories</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//inheritance, implementation</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">BookRepository</span> : <span class="title">Repository</span>&lt;<span class="title">Book</span>&gt;, <span class="title">IBookRepository</span></span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//Property</span></span><br><span class="line">        <span class="keyword">public</span> MypostgresContext MypostgresContext</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">get</span> &#123; <span class="keyword">return</span> Context <span class="keyword">as</span> MypostgresContext; &#125;   </span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">BookRepository</span>(<span class="params">MypostgresContext context</span>) : <span class="title">base</span>(<span class="params">context</span>)</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        IEnumerable&lt;Book&gt; IBookRepository.GetBooksByAuthor(Author author)</span><br><span class="line">        &#123;</span><br><span class="line">           <span class="keyword">return</span> MypostgresContext.Books.Where(x=&gt;x.AuthorId==author.AuthorId).ToList();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        IEnumerable&lt;Book&gt; IBookRepository.GetTopSellingBooks(<span class="built_in">int</span> count)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> MypostgresContext.Books.OrderByDescending(b =&gt; b.Price).Take(count).ToList();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IAuthorRepository-AuthorRepository"><a href="#IAuthorRepository-AuthorRepository" class="headerlink" title="IAuthorRepository, AuthorRepository"></a>IAuthorRepository, AuthorRepository</h3><figure class="highlight c#"><figcaption><span>IAuthorRepository</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> RepositoryPatternPractice.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RepositoryPatternPractice.Repositories</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IAuthorRepository</span> : <span class="title">IRepository</span>&lt;<span class="title">Author</span>&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">Author <span class="title">GetAuthorByName</span>(<span class="params"><span class="built_in">string</span> name</span>)</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><figcaption><span>AuthorRepository</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> RepositoryPatternPractice.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RepositoryPatternPractice.Repositories</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">AuthorRepository</span> : <span class="title">Repository</span>&lt;<span class="title">Author</span>&gt;, <span class="title">IAuthorRepository</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> MypostgresContext MypostgresContext</span><br><span class="line">        &#123;</span><br><span class="line"><span class="keyword">get</span> &#123; <span class="keyword">return</span> Context <span class="keyword">as</span> MypostgresContext; &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">AuthorRepository</span>(<span class="params">MypostgresContext context</span>) : <span class="title">base</span>(<span class="params">context</span>)</span> </span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Author <span class="title">GetAuthorByName</span>(<span class="params"><span class="built_in">string</span> name</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> MypostgresContext.Authors.Where(x=&gt;x.AuthorName.Equals(name)).ToList().FirstOrDefault();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="IUnitOfWork-UnitOfWork"><a href="#IUnitOfWork-UnitOfWork" class="headerlink" title="IUnitOfWork, UnitOfWork"></a>IUnitOfWork, UnitOfWork</h3><p><strong>這裡開始是unit of work的實作</strong></p><figure class="highlight c#"><figcaption><span>IUnitOfWork</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> RepositoryPatternPractice.Repositories;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RepositoryPatternPractice</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//Unit of work</span></span><br><span class="line"><span class="comment">//interfce chain with IDisposable, so the class implement this interface </span></span><br><span class="line">    <span class="comment">//need to implement the Dispose() method</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title">IUnitOfWork</span> : <span class="title">IDisposable</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//Repository act the collection of objects in memory</span></span><br><span class="line">IBookRepository Books &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line">IAuthorRepository Authors &#123; <span class="keyword">get</span>; &#125;</span><br><span class="line"><span class="function"><span class="built_in">int</span> <span class="title">Complete</span>()</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c#"><figcaption><span>UnitOfWork</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> RepositoryPatternPractice.Models;</span><br><span class="line"><span class="keyword">using</span> RepositoryPatternPractice.Repositories;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RepositoryPatternPractice</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title">UnitOfWork</span> : <span class="title">IUnitOfWork</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">readonly</span> MypostgresContext _context;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> IBookRepository Books &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"><span class="keyword">public</span> IAuthorRepository Authors &#123; <span class="keyword">get</span>; <span class="keyword">private</span> <span class="keyword">set</span>; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//we will use this context across all repositories</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">UnitOfWork</span>(<span class="params">MypostgresContext context</span>)</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>._context = context;</span><br><span class="line"><span class="comment">//use the same context to initialize our repository</span></span><br><span class="line">Books = <span class="keyword">new</span> BookRepository(_context);</span><br><span class="line">Authors = <span class="keyword">new</span> AuthorRepository(_context);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="built_in">int</span> <span class="title">Complete</span>()</span></span><br><span class="line">        &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>._context.SaveChanges();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">Dispose</span>()</span></span><br><span class="line">&#123;</span><br><span class="line">_context.Dispose(); <span class="comment">//dispose the context</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>這裡可以發現, UnitOfWork將Repository作為自己的屬性, 這樣一來使用者就可以透過ＵnitOfWork點出Repository再做操作.<br>而Complete()方法, 就是拿來做Update後Save用的, 儲存所有異動<br>最後實作Dispose是因為可以透過using block釋放context<br>在每一次的operation, Repository應該使用同一個context (re-use)<br>但如果你是在Controller內直接使用Unit of work, 使用AddScoped() DI進去, 就不用使用using block來去釋放context.<br>原因可以看.NET DI的生命週期, 透過DI來做創建與釋放, 就不需要使用using block.</p><h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><p><strong>這裡是使用範例</strong></p><figure class="highlight c#"><figcaption><span>使用範例</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> System;</span><br><span class="line"><span class="keyword">using</span> RepositoryPatternPractice.Models;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">RepositoryPatternPractice</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="keyword">class</span> <span class="title">Program</span></span><br><span class="line">   &#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">Main</span>(<span class="params"><span class="built_in">string</span>[] args</span>)</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//example of using these interfaces and classes</span></span><br><span class="line">            <span class="comment">//using block like try/finally and call Dispose()</span></span><br><span class="line">            <span class="keyword">using</span> ( <span class="keyword">var</span> unitOfWork = <span class="keyword">new</span> UnitOfWork(<span class="keyword">new</span> MypostgresContext()) )</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//Example 1</span></span><br><span class="line">                <span class="keyword">var</span> books = unitOfWork.Books.GetAll();</span><br><span class="line">                Console.WriteLine(<span class="string">&quot;Initial State: &quot;</span>);</span><br><span class="line">                <span class="keyword">foreach</span> (Book b <span class="keyword">in</span> books)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;book: <span class="subst">&#123;b.BookName&#125;</span>, author: <span class="subst">&#123;unitOfWork.Authors.Get(b.AuthorId).AuthorName&#125;</span>&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine();</span><br><span class="line"></span><br><span class="line">                <span class="comment">//Example 2</span></span><br><span class="line">                unitOfWork.Books.AddRange(<span class="keyword">new</span> List&lt;Book&gt;() &#123;</span><br><span class="line">                    <span class="keyword">new</span> Book() &#123; BookName=<span class="string">&quot;AIGuide&quot;</span>, Price=<span class="number">300</span>, Author=unitOfWork.Authors.GetAuthorByName(<span class="string">&quot;Xuan&quot;</span>)&#125;,</span><br><span class="line">                    <span class="keyword">new</span> Book() &#123; BookName=<span class="string">&quot;PSGuide&quot;</span>, Price=<span class="number">230</span>, Author=unitOfWork.Authors.GetAuthorByName(<span class="string">&quot;Xuan&quot;</span>)&#125;</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                <span class="comment">//Example3</span></span><br><span class="line">                unitOfWork.Books.Get(<span class="number">2</span>).BookName = <span class="string">&quot;C#dotNETGuide&quot;</span>;</span><br><span class="line"></span><br><span class="line">                unitOfWork.Complete();</span><br><span class="line"></span><br><span class="line">                Console.WriteLine(<span class="string">&quot;After changes: &quot;</span>);</span><br><span class="line">                books = unitOfWork.Books.GetAll();</span><br><span class="line">                <span class="keyword">foreach</span> (Book b <span class="keyword">in</span> books)</span><br><span class="line">                &#123;</span><br><span class="line">                    Console.WriteLine(<span class="string">$&quot;book: <span class="subst">&#123;b.BookName&#125;</span>, author: <span class="subst">&#123;unitOfWork.Authors.Get(b.AuthorId).AuthorName&#125;</span>&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                Console.WriteLine();</span><br><span class="line">            &#125;</span><br><span class="line">            Console.ReadKey();</span><br><span class="line">        &#125;</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="結語"><a href="#結語" class="headerlink" title="結語"></a>結語</h2><p>如果想要做到非同步, 只要把Repository內部的實作改成async就好, 其餘都一樣.<br>其實Repository pattern, Unit of Work pattern會跟DI一起使用, 但這裡為求簡單就沒有使用DI了<br>希望大家看完這篇文章對於Repository pattern更加理解</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;這篇文章主要介紹何為Repository Pattern, 並如何在.NET C#中實作&lt;br&gt;並結合Unit Of Work Pattern, 讓程式對Repository解耦&lt;br&gt;這個design pattern可以說是踏入軟體架構的敲門磚&lt;br&gt;也算是非常常用的pattern, 實用性非常高&lt;/p&gt;</summary>
    
    
    
    <category term="Design Pattern" scheme="https://mao-code.github.io/categories/Design-Pattern/"/>
    
    
    <category term="design-pattern" scheme="https://mao-code.github.io/tags/design-pattern/"/>
    
  </entry>
  
</feed>
